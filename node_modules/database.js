var mysql = require('mysql');
var md5 = require('md5');
var bcrypt = require('bcrypt-nodejs');
var config = require('config');

var databaseLog = function(message) {
    console.log("database.js - Log: " + message);
};

var databaseError = function(error) {
    console.log("database.js - Error: " + error);
};

var query = function(string, values, callback) {
    var connection = mysql.createConnection(config.mysql);

    connection.connect(function (error) {
        if (error) {
            databaseError(error);
            callback(null, null);
        }

        var query = connection.query(string, values, function (error, rows, fields) {
            databaseLog("Queried mysql: " + query.sql);
            if (error) {
                databaseError(error);
            }
            connection.end();
            callback(rows, fields);
        });
    });
};

module.exports.init = function(callback) {
    query("CREATE TABLE IF NOT EXISTS Login (id INT NOT NULL AUTO_INCREMENT," +
        " name VARCHAR(32) UNIQUE NOT NULL," +
        " firstName VARCHAR(32)," +
        " lastName VARCHAR(32)," +
        " email VARCHAR(32) UNIQUE," +
        " passwordHash VARCHAR(60) NOT NULL," +
        " priviledge INT NOT NULL DEFAULT 0," + // 0 = standard, 1 = admin
        " creationDate DATETIME NOT NULL DEFAULT NOW()," +
        " upgradeEndDate DATETIME NOT NULL DEFAULT NOW()," +
        " PRIMARY KEY(id));", [], function (rows) {
        if (rows == null) {
            databaseError("Could not create table Login.");
        } else {
            /*query("CREATE TABLE IF NOT EXISTS UpgradeCode (id INT NOT NULL AUTO_INCREMENT," +
                " Login_id INT," +
                " value INT NOT NULL DEFAULT 30," +
                " creationDate DATETIME NOT NULL DEFAULT NOW()," +
                " activationCode VARCHAR(6) UNIQUE," +
                " activationDate DATETIME," +
                " FOREIGN KEY(Login_id) REFERENCES Login(id)," +
                " PRIMARY KEY(id));", [], function(rows) {
                if (rows == null) {
                    databaseError("Could not create table AccessUpgrade.");
                } else {

                }
            });*/
            query("CREATE TABLE IF NOT EXISTS Referral (id INT NOT NULL AUTO_INCREMENT," +
                " Login_id INT NOT NULL," +
                " recipientLogin_id INT, " +
                " code VARCHAR(6) UNIQUE NOT NULL, " +
                " creationDate DATETIME NOT NULL DEFAULT NOW()," +
                " FOREIGN KEY(Login_id) REFERENCES Login(id)," +
                " FOREIGN KEY(recipientLogin_id) REFERENCES Login(id)," +
                " PRIMARY KEY(id));", [], function(rows) {
                if (rows == null) {
                    databaseError("Could not create table Referral.");
                }
            })
            query("CREATE TABLE IF NOT EXISTS Session (id INT NOT NULL AUTO_INCREMENT," +
                " Login_id INT NOT NULL," +
                " session VARCHAR(32) UNIQUE," +
                " creationDate DATETIME NOT NULL DEFAULT NOW()," +
                " FOREIGN KEY(Login_id) REFERENCES Login(id)," +
                " PRIMARY KEY(id));", [], function(rows) {
                if (rows == null) {
                    databaseError("Could not create table Session.");
                } else {

                }
            });
            query("CREATE TABLE IF NOT EXISTS Citation (id INT NOT NULL AUTO_INCREMENT," +
                " Login_id INT," +
                " sourceUrl VARCHAR(512) NOT NULL," +
                " sourceType VARCHAR(16) NOT NULL DEFAULT 'site'," +
                " sourceAuthor VARCHAR(128)," +
                " sourceTitle VARCHAR(128)," +
                " containerTitle VARCHAR(64)," +
                " sourceContributors VARCHAR(256)," +
                " sourceVersion VARCHAR(32)," +
                " sourceNumber VARCHAR(32)," +
                " publisherTitle VARCHAR(128)," +
                " sourcePublicationDate VARCHAR(16)," +
                " creationDate DATETIME NOT NULL DEFAULT NOW()," +
                " FOREIGN KEY(Login_id) REFERENCES Login(id)," +
                " PRIMARY KEY(id));", [], function(rows) {
                if (rows == null) {
                    databaseError("Could not create table Citation.");
                } else {
                    /*query("CREATE TABLE IF NOT EXISTS Vote (id INT NOT NULL AUTO_INCREMENT," +
                        " Login_id INT NOT NULL," +
                        " Citation_id INT NOT NULL," +
                        " creationDate DATETIME NOT NULL DEFAULT NOW()," +
                        " FOREIGN KEY(Login_id) REFERENCES Login(id)," +
                        " FOREIGN KEY(Citation_id) REFERENCES Citation(id)," +
                        " PRIMARY KEY(id));", [], function(rows) {
                        if (rows == null) {
                            databaseError("Failed to create table Citation.");
                        } else {

                        }
                    });*/
                }
            });
        }
    });
};

module.exports.createLogin = function(name, password, referralCode, callback) {
    bcrypt.hash(password, null, null, function(error, passwordHash) {
        query("INSERT INTO Login (name, passwordHash) VALUES (?, ?)", [name, passwordHash], function(rows) {
            if (rows == null) {
                databaseError("Could not create row in Login.");
                callback(null);
            } else {
                query("SELECT id FROM Login WHERE name=?;", [name], function(rows) {
                    if (rows == null || rows.length != 1) {
                        databaseError("Could not select newly created row from Login.");
                    } else {
                        if (referralCode) {
                            query("UPDATE Referral SET recipientLogin_id=? WHERE code=? AND ISNULL(recipientLogin_id);", [rows[0].id, referralCode], function (rows) {
                                if (rows == null) {
                                    databaseError("Could not update row in Referral.");
                                }
                            });
                        }

                        callback(rows[0].id);
                    }
                });
            }
        });
    });
};

module.exports.checkLogin = function(name, password, callback) {
    if (password) {
        query("SELECT id, passwordHash FROM Login WHERE name=?;", [name], function (rows) {
            if (rows == null) {
                databaseError("Could not select row from Login.");
            } else if (rows.length != 1) {
                callback(null);
            } else {
                bcrypt.compare(password, rows[0].passwordHash, function (error, passwordMatch) {
                    if (passwordMatch) {
                        callback(rows[0].id);
                    } else {
                        callback(null);
                    }
                })
            }
        });
    } else {
        query("SELECT id FROM Login WHERE name=?;", [name], function(rows) {
            if (rows == null) {
                databaseError("Could not select row from Login.");
            } else if (rows.length != 1) {
                callback(null);
            } else {
                callback(rows[0].id);
            }
        });
    }
};

module.exports.getLogin = function(loginId, callback) {
    query("SELECT id, name, firstName, lastName, email, priviledge, creationDate, upgradeEndDate, citationCount, referralCount, referralRecipientCount FROM (SELECT id, name, firstName, lastName, email, priviledge, creationDate, upgradeEndDate FROM Login WHERE id=?) a, (SELECT COUNT(id) AS citationCount FROM Citation WHERE Login_id=?) b, (SELECT COUNT(id) AS referralCount, COUNT(recipientLogin_id) AS referralRecipientCount FROM Referral WHERE Login_id=? AND (!ISNULL(recipientLogin_id) OR creationDate + INTERVAL 48 HOUR > NOW())) c;", [loginId, loginId, loginId], function(rows) {
        if (rows == null) {
            databaseError("Could not select row from Login.");
        } else if (rows.length != 1) {
            callback(null);
        } else {
            callback(rows[0]);
        }
    });
};

module.exports.getLoginName = function(loginId, callback) {
    query("SELECT name FROM Login WHERE id=?;", [loginId], function(rows) {
        if (rows == null) {
            databaseError("Could not select row from Login.");
        } else if (rows.length != 1) {
            callback(null);
        } else {
            callback(rows[0].name);
        }
    });
};

module.exports.getLogins = function(callback) {
    query("SELECT id, name, firstName, lastName, email, priviledge, creationDate, upgradeEndDate, IFNULL(citationCount, 0)  AS  citationCount, IFNULL(referralCount, 0) AS referralCount, IFNULL(referralRecipientCount, 0)  AS  referralRecipientCount FROM Login LEFT JOIN (SELECT Login_id, COUNT(id) AS citationCount FROM Citation GROUP BY Login_id) a ON Login.id=a.Login_id LEFT JOIN (SELECT Login_id, COUNT(id) AS referralCount, COUNT(recipientLogin_id) AS referralRecipientCount FROM Referral GROUP BY Login_id) b ON Login.id=b.Login_id;", [], function(rows) {
        if (rows == null) {
            databaseError("Could not select rows from Login.");
        } else {
            callback(rows);
        }
    });
};

module.exports.createReferral = function(loginId, callback) {
    var referralCode = String(md5(Date.now() + Math.round(Math.random() * 1000))).substring(0, 6).toUpperCase();

    query("INSERT INTO Referral (Login_id, code) VALUES (?, ?);", [loginId, referralCode], function(rows) {
        if (rows == null) {
            databaseError("Could not insert row into Referral.");
        } else {
            callback(referralCode);
        }
    });
};

module.exports.createSession = function(loginId, callback) {
    var session = String(md5(Date.now() + Math.round(Math.random() * 1000))).substring(0, 32);

    query("INSERT INTO Session (Login_id, session) VALUES (?, ?);", [loginId, session], function(rows) {
        if (rows == null) {
            databaseError("Could not insert row into Session.");
        } else {
            callback(session);
        }
    });
};

module.exports.checkSession = function(session, callback) {
    query("SELECT Login_id FROM Session WHERE session = ?;", [session], function(rows) {
        if (rows == null) {
            databaseError("Could not select row from Session.");
        } else if (rows.length != 1) {
            callback(null);
        } else {
            callback(rows[0].Login_id);
        }
    });
};

module.exports.deleteSession = function(session, callback) {
    query("DELETE FROM Session WHERE session=?;", [session], function(rows) {
        if (rows == null) {
            databaseError("Could not delete row from Session.");
        } else {
            callback();
        }
    });
};

module.exports.createCitation = function(loginId, sourceURL, sourceAuthor, sourceTitle, containerTitle, publisherTitle, sourcePublicationDate, callback) {
    query("INSERT INTO Citation (Login_id, sourceURL, sourceAuthor, sourceTitle, containerTitle, publisherTitle, sourcePublicationDate) VALUES (?, ?, NULLIF(?, ''), NULLIF(?, ''), NULLIF(?, ''), NULLIF(?, ''), NULLIF(?, ''));", [loginId, sourceURL.trim(), sourceAuthor.trim(), sourceTitle.trim(), containerTitle.trim(), publisherTitle.trim(), sourcePublicationDate.trim()], function(rows) {
        if (rows == null) {
            databaseError("Could not insert row into Citation.");
        } else {
            query("SELECT id FROM Citation WHERE Login_id=? ORDER BY creationDate DESC;", [loginId], function(rows) {
                if (rows == null) {
                    databaseError("Error selecting rows from Citation.");
                } else if (rows.length == 0) {
                    callback(null);
                } else {
                    callback(rows[0].id);
                }
            });
        }
    });
};

module.exports.getCitation = function(loginId, citationId, callback) {
    query("SELECT * FROM Citation WHERE Login_id=? AND id=?;", [loginId, citationId], function(rows) {
        if (rows == null) {
            databaseError("Could not select row from Citation.");
        } else if (rows.length != 1) {
            callback(null);
        } else {
            callback(rows[0]);
        }
    });
};

module.exports.getCitations = function(loginId, callback) {
    query("SELECT * FROM Citation WHERE Login_id=? ORDER BY creationDate DESC;", [loginId], function(rows) {
        if (rows == null) {
            databaseError("Could not select rows from Citation.");
        } else {
            callback(rows);
        }
    });
};

var formatDate = function(date) {
    // http://ia.juniata.edu/citation/mla/mla-months.htm
    var months = ['Jan.', 'Feb.', 'Mar.', 'Apr.', 'May', 'June', 'July', 'Aug.', 'Sept.', 'Oct.', 'Nov.', 'Dec.'];

    return date.getDate() + " " + months[date.getMonth()] + " " + date.getFullYear();
}

var formatCitation = function(citation) {
    var citationText = "";

    // https://owl.english.purdue.edu/owl/resource/747/01/
    if (citation.sourceAuthor) {
        var sourceAuthorSegments = citation.sourceAuthor.split(' ');

        if (sourceAuthorSegments.length >= 3 && citation.sourceAuthor.indexOf(',') == -1) {
            if (sourceAuthorSegments[1].length == 2) {
                citation.sourceAuthor = sourceAuthorSegments[2] + ", " + sourceAuthorSegments[0] + " " + sourceAuthorSegments[1];
            } else {
                citation.sourceAuthor = sourceAuthorSegments[1] + ", " + sourceAuthorSegments[0];
            }
        } else if (citation.sourceAuthor.indexOf('.') == -1 && citation.sourceAuthor.indexOf(',') == -1 && sourceAuthorSegments.length == 2) {
            citation.sourceAuthor = sourceAuthorSegments[1] + ', ' + sourceAuthorSegments[0];
        }

        if (citation.sourceAuthor.endsWith('.')) {
            citationText += citation.sourceAuthor + " ";
        } else {
            citationText += citation.sourceAuthor + ". ";
        }
    }

    if (citation.sourceTitle) {
        citationText += '"' + citation.sourceTitle + '." ';
    }

    if (citation.containerTitle) {
        citationText += "<i>" + citation.containerTitle + "</i>, ";
    }

    if (citation.sourceContributors) {
        citationText += citation.sourceContributors + ", ";
    }

    if (citation.sourceVersion) {
        citationText += citation.sourceVersion + ", ";
    }

    if (citation.sourceNumber) {
        citationText += citation.sourceNumber + ", ";
    }

    if (citation.publisherTitle) {
        citationText += citation.publisherTitle + ", ";
    }

    if (citation.sourcePublicationDate) {
        var hyphenSplits = citation.sourcePublicationDate.split('-').length;
        var slashSplits = citation.sourcePublicationDate.split('/').length;

        if (hyphenSplits == 3 || slashSplits == 3) {
            citation.sourcePublicationDate = formatDate(new Date(citation.sourcePublicationDate));
        }

        citationText += citation.sourcePublicationDate + (citation.sourceUrl || citation.sourceLocation ? ", " : ".");
    }

    if (citation.sourceLocation) {
        citationText += citation.sourceLocation + ". ";
    } else {
        citationText += citation.sourceUrl + ". ";
    }

    return citationText;
};

module.exports.getCitationFormatted = function(loginId, citationId, callback) {
    query("SELECT * FROM Citation WHERE Login_id=? AND id=?;", [loginId, citationId], function (rows) {
        if (rows == null) {
            databaseError("Could not select row from Citation.");
        } else if (rows.length != 1) {
            callback(null);
        } else {
            var citationText = formatCitation(rows[0]);

            // If a different user formats the citation, odds are the accessed it now not at the creation date
            var date = (loginId == rows[0].Login_id ? new Date(rows[0].creationDate) : new Date());

            citationText += "Accessed " + formatDate(date) + ".";

            callback(citationText);
        }
    });
};

module.exports.getCitationsFormatted = function(loginId, callback) {
    // TODO: Make this a parameter or based on access level
    var loginCitationsOnly = true;

    query("SELECT * FROM Citation" + (loginCitationsOnly ? " WHERE Login_id=?" : "") + " ORDER BY creationDate DESC;", (loginCitationsOnly ? [loginId] : []), function(rows) {
        if (rows == null) {
            databaseError("Could not select rows from Citation.");
        } else {
            var citations = [];

            for (var i = 0; i < rows.length; i++) {
                var citationText = formatCitation(rows[i]);

                var date = (loginId == rows[i].Login_id ? new Date(rows[i].creationDate) : new Date());

                citationText += "Accessed " + formatDate(date) + ".";

                citations.push(citationText);
            }

            callback(citations);
        }
    });
};