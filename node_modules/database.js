var mysql = require('mysql');
var md5 = require('md5');
var bcrypt = require('bcrypt-nodejs');
var config = require('config');

var databaseLog = function(message) {
    console.log("database.js - Log: " + message);
};

var databaseError = function(error) {
    console.log("database.js - Error: " + error);
};

var query = function(string, values, callback) {
    var connection = mysql.createConnection(config.mysql);

    connection.connect(function (error) {
        if (error) {
            databaseError(error);
            callback(null, null);
        }

        var query = connection.query(string, values, function (error, rows, fields) {
            databaseLog("Queried mysql: " + query.sql);
            if (error) {
                databaseError(error);
            }
            connection.end();
            callback(rows, fields);
        });
    });
};

module.exports.init = function(callback)
{
    query("CREATE TABLE IF NOT EXISTS Login (id INT NOT NULL AUTO_INCREMENT," +
        " name VARCHAR(32) UNIQUE NOT NULL," +
        " firstName VARCHAR(32)," +
        " lastName VARCHAR(32)," +
        " email VARCHAR(32) UNIQUE," +
        " passwordHash VARCHAR(60) NOT NULL," +
        " creationDate DATETIME NOT NULL DEFAULT NOW()," +
        " upgradeEndDate DATETIME NOT NULL DEFAULT NOW()," +
        " PRIMARY KEY(id));", [], function (rows) {
        if (rows == null) {
            databaseError("Failed to create table Login.");
        } else {
            query("CREATE TABLE IF NOT EXISTS UpgradeCode (id INT NOT NULL AUTO_INCREMENT," +
                " Login_id INT," +
                " value INT NOT NULL DEFAULT 30," +
                " creationDate DATETIME NOT NULL DEFAULT NOW()," +
                " activationCode VARCHAR(6) UNIQUE," +
                " activationDate DATETIME," +
                " FOREIGN KEY(Login_id) REFERENCES Login(id)," +
                " PRIMARY KEY(id));", [], function(rows) {
                if (rows == null) {
                    databaseError("Failed to create table AccessUpgrade.");
                } else {

                }
            });
            query("CREATE TABLE IF NOT EXISTS Session (id INT NOT NULL AUTO_INCREMENT," +
                " Login_id INT NOT NULL," +
                " session VARCHAR(32) UNIQUE," +
                " creationDate DATETIME NOT NULL DEFAULT NOW()," +
                " FOREIGN KEY(Login_id) REFERENCES Login(id)," +
                " PRIMARY KEY(id));", [], function(rows) {
                if (rows == null) {
                    databaseError("Failed to create table Session.");
                } else {

                }
            });
            query("CREATE TABLE IF NOT EXISTS Citation (id INT NOT NULL AUTO_INCREMENT," +
                " Login_id INT," +
                " sourceUrl VARCHAR(512) NOT NULL," +
                " sourceAuthor VARCHAR(128)," +
                " sourceTitle VARCHAR(128)," +
                " sourceContainerTitle VARCHAR(64)," +
                " sourceContributors VARCHAR(256)," +
                " sourceVersion VARCHAR(128)," +
                " sourceNumber VARCHAR(128)," +
                " sourcePublisher VARCHAR(128)," +
                " sourcePublicationDate DATE," +
                " creationDate DATETIME NOT NULL DEFAULT NOW()," +
                " FOREIGN KEY(Login_id) REFERENCES Login(id)," +
                " PRIMARY KEY(id));", [], function(rows) {
                if (rows == null) {
                    databaseError("Failed to create table Citation.");
                } else {
                    query("CREATE TABLE IF NOT EXISTS Vote (id INT NOT NULL AUTO_INCREMENT," +
                        " Login_id INT NOT NULL," +
                        " Citation_id INT NOT NULL," +
                        " creationDate DATETIME NOT NULL DEFAULT NOW()," +
                        " FOREIGN KEY(Login_id) REFERENCES Login(id)," +
                        " FOREIGN KEY(Citation_id) REFERENCES Citation(id)," +
                        " PRIMARY KEY(id));", [], function(rows) {
                        if (rows == null) {
                            databaseError("Failed to create table Citation.");
                        } else {

                        }
                    });
                }
            });
        }
    });
};

module.exports.createLogin = function(name, password, callback) {
    bcrypt.hash(password, null, null, function(error, passwordHash) {
        query("INSERT INTO Login (name, passwordHash) VALUES (?, ?)", [name, passwordHash], function(rows) {
            if (rows == null) {
                databaseError("Could not create row in Login.");
                callback(null);
            } else {
                query("SELECT id FROM Login WHERE name=?;", [name], function(rows) {
                    if (rows == null || rows.length != 1) {
                        databaseError("Could not select newly created row from Login.");
                    } else {
                        callback(rows[0].id);
                    }
                });
            }
        });
    });
};

module.exports.checkLogin = function(name, password, callback) {
    if (password) {
        query("SELECT id, passwordHash FROM Login WHERE name=?;", [name], function (rows) {
            if (rows == null) {
                databaseError("Could not select row from Login.");
            } else if (rows.length != 1) {
                callback(null);
            } else {
                bcrypt.compare(password, rows[0].passwordHash, function (error, passwordMatch) {
                    if (passwordMatch) {
                        callback(rows[0].id);
                    } else {
                        callback(null);
                    }
                })
            }
        });
    } else {
        query("SELECT id FROM Login WHERE name=?;", [name], function(rows) {
            if (rows == null) {
                databaseError("Could not select row from Login.");
            } else if (rows.length != 1) {
                callback(null);
            } else {
                callback(rows[0].id);
            }
        });
    }
};

module.exports.getLoginName = function(loginId, callback) {
    query("SELECT name from Login WHERE id=?;", [loginId], function(rows) {
        if (rows == null) {
            databaseError("Could not select row from Login.");
        } else if (rows.length != 1) {
            callback(null);
        } else {
            callback(rows[0].name);
        }
    });
};

module.exports.createSession = function(loginId, callback) {
    var session = String(md5(Date.now() + Math.round(Math.random() * 1000))).substring(0, 32);

    query("INSERT INTO Session (Login_id, session) VALUES (?, ?);", [loginId, session], function(rows) {
        if (rows == null) {
            databaseError("Could not insert row into Session.");
        } else {
            callback(session);
        }
    });
};

module.exports.checkSession = function(session, callback) {
    query("SELECT Login_id FROM Session WHERE session = ?;", [session], function(rows) {
        if (rows == null) {
            databaseError("Could not select row from Session.");
        } else if (rows.length != 1) {
            callback(null);
        } else {
            callback(rows[0].Login_id);
        }
    });
};

module.exports.deleteSession = function(session, callback) {
    query("DELETE FROM Session WHERE session=?;", [session], function(rows) {
        if (rows == null) {
            databaseError("Could not delete row from Session.");
        } else {
            callback();
        }
    });
}